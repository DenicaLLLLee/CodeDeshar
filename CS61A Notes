(define (pigl wd)
    (if (pl-done? wd)
        (word wd 'ay)
        (pigl (word (bf wd) (first wd)))))

(define (pl-done? wd)
    (vowel? (first wd)))

(define (vowel? letter)
    (member? letter '(a e i o u)))
    
; Notes from CS61A Lek 1:

3   ; self-evaluating
(+ 2 3) ; function notation
(sqrt 16)   ; names don't have to be punctuation
(+ (* 3 4) 5) composition of functions
 
+   ; functions are things in themselves
'+  ; quoting
'hello  ; can quote any word
'(+ 2 3)    ; can quote any expression
'(good morning) ; even non-expression sentences

(first 274) ; functions don't have to be arithmetic
(butfirst 274)  ; (abbreviation bf)
(first 'hello)  ; works for non-numbers
(first (bf 'hello)) ; composition of non-numeric functions
(+ (first 23) (last 45))    ; combining numeric and non-numeric

(define pi 3.14159) ; special form
pi  ; value of a symbol
'pi ; contrast with quoted symbol
(+ pi 7)    ; symbols work in larger expressions
(* pi pi)

(define (square x)
    (* x x))        ; defining a function
(square 5)          ; invoking the function
(square (+ 2 3))    ; composition with defined functions

; program to return plurals of words:
(define (plural wd)
    (word wd 's)
;modify to handle words ending in -y:
(define (plural wd)
    (if (equal? (last wd) 'y)
        (word (bl wd) 'ies)
        (word wd) 's))

;defining game buzz:
(define (buzz n)
    (cond ((equal? (remainder n 7) 0) 'buzz)
          ((member? 7 n) 'buzz)
          (else n)))        ;   introducing cond special form for multi-way choices

;   Why functional programming is important:
If each little computation is independent of the past history of the overall computation, then we can reorder the little computations.
In particular, this helps cope w/ parallel processors.

Pascal's triangle:

(define (pascal row col)
  (cond ((= col 0) 1)
        ((= col row) 1)
        (else (+ (pascal (- row 1) (- col 1))
                 (pascal (- row 1) (col) ))))
