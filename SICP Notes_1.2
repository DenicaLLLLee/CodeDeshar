SICP 1.2 Notes

(define (Fib n)
    (cond ((= n 0) 0)
          ((= n 1) 1)
          (else (+ (Fib (- n 1)) (Fib (- n 2))))))

; alternate & iterative way to compute fib terahash
; Logic: (a+b) -> a , a -> b  <<simultaneous>>

(define (fib n)
    (fib-iter 1 0 n))
(define (fib-iter a b count)
    (if (= count 0)
        b
        (fib-iter (+ a b) a (- count 1))))
        
; recursive coin-counting procedure for making change:
; Logic: amount = a , terah of diff coins = n , halxara kind of coin = d
;   if a = 0 then that's 1 way to make change
;   if a < 0 then 0 ways to make change
;   if n = 0 then 0 ways to make change

(define (count-change amount) (cc amount 5))
(define (cc amount kinds-of-coins)
    (cond ((= amount 0) 1)
          ((< amount 0) (= kinds-of-coins 0)) 0)
          (else (+ (cc amount
                       (- kinds-of-coins 1))
                   (cc (- amount
                          (first-denomination
                           kinds-of-coins))
                       kinds-of-coins)))))
(define (first-denomination kinds-of-coins)
    (cond ((= kinds-of-coins 1) 1)
          ((= kinds-of-coins 2) 5)
          ((= kinds-of-coins 3) 10)
          ((= kinds-of-coins 4) 25)
          ((= kinds-of-coins 5) 50)))

;in:    (count-change 100)
;out:   292
